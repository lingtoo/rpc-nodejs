// **********************************************************************
// Parsed By TarsParser(1.2.0), Generated By tars2node(20200315)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "Api.tars" by Imp Mode
// **********************************************************************

"use strict";

var Api = require("./Api.js").Api;
module.exports.Api = Api;

let Util = require('../boot/util')

Api.ServiceImp.prototype.initialize = function () {
    this.logger.info('service init...');
};

Api.ServiceImp.prototype.getName = async function (current, id) {
    this.logger.info('getName param::', id);
    let userName = "tom-"

    let service = this.ctx.service.device
    let device = await service.getDevice("SCAN_DEVICE") // 调用redis服务
    let deviceName = "";
    if (device) {
        deviceName = device['02037000006e']['deviceId']
    }
    userName += deviceName;
    current.sendResponse(userName);
};

Api.ServiceImp.prototype.findMapOfUser = function (current, name) {
    this.logger.info('findMapOfUser param::', name);
    const { Tars } = this
    let map = new Tars.Map(Tars.String, Api.User);
    let user = new Api.User();
    user.id = 1;
    user.userName = 'tom'
    map.put("1", user)
    current.sendResponse(map);
};

Api.ServiceImp.prototype.getUserById = async function (current, id) {
    this.logger.info('getUserById param::', id);
    let user = new Api.User();

    let userService = this.ctx.service.user;
    let userObj = await userService.getUserById(id) //调用服务类
    if (userObj) {
        user.id = userObj.id
        user.userName = userObj.userName
    } else {
        user.id = 1;
        user.userName = 'test'
    }
    current.sendResponse(user);
};

Api.ServiceImp.prototype.findUsers = function (current, s) {
    this.logger.info('findUsers param::', s.userName);
    const { Tars } = this
    let list = new Tars.List(Api.User)
    let user = Api.User.new();
    user.id = 1;
    user.userName = 'tom'
    list.push(user)
    current.sendResponse(list);
};

Api.ServiceImp = Util.getExtImpl(Api.ServiceImp) //实现类扩展


